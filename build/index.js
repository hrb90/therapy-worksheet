// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";       

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  exports["NonEmpty"] = NonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["showTuple"] = showTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Invalid = (function () {
      function Invalid(value0) {
          this.value0 = value0;
      };
      Invalid.create = function (value0) {
          return new Invalid(value0);
      };
      return Invalid;
  })();
  var Valid = (function () {
      function Valid(value0) {
          this.value0 = value0;
      };
      Valid.create = function (value0) {
          return new Valid(value0);
      };
      return Valid;
  })();
  var showV = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Invalid) {
                  return "(Invalid " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Valid) {
                  return "(Valid " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup line 57, column 1 - line 57, column 65: " + [ v.constructor.name ]);
          });
      };
  };
  var invalid = Invalid.create;
  var functorV = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Invalid) {
              return new Invalid(v1.value0);
          };
          if (v1 instanceof Valid) {
              return new Valid(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Validation.Semigroup line 61, column 1 - line 61, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyV = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return new Invalid(v.value0);
              };
              if (v1 instanceof Invalid) {
                  return new Invalid(v1.value0);
              };
              if (v instanceof Valid && v1 instanceof Valid) {
                  return new Valid(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup line 69, column 1 - line 69, column 52: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var applicativeV = function (dictSemigroup) {
      return new Control_Applicative.Applicative(function () {
          return applyV(dictSemigroup);
      }, Valid.create);
  };
  exports["invalid"] = invalid;
  exports["showV"] = showV;
  exports["functorV"] = functorV;
  exports["applyV"] = applyV;
  exports["applicativeV"] = applicativeV;
})(PS["Data.Validation.Semigroup"] = PS["Data.Validation.Semigroup"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.get = function (sig) {
    return function () {
      return sig.get();
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  } 

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  exports.cTextarea = createComponent("textarea",
    function(initial) {
      var textarea = document.createElement("textarea");
      textarea.value = initial;
      return textarea;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );


  exports.cResizableList = function(prependDefault) {
    return function(listUi) {
      return function(label) {
        return function(defaultList) {
          return function(send) {
            return function() {
              var uid = getUniqueID();
              var container = document.createElement("div");
              container.className = "flare-input";

              if (label !== "") {
                var labelEl = document.createElement("label");
                labelEl.htmlFor = uid;
                labelEl.appendChild(document.createTextNode(label));
                container.appendChild(labelEl);
              }

              // update to reflect the given list
              function setList(list) {
                var content = document.createElement("div");
                content.id = uid;
                content.className = "flare-input-list";

                var flare = listUi(list)();  // UI missing +/- buttons at top
                flare.value1.subscribe(function(val) { send(val)(); });

                // always add plusButton, even for empty lists
                var plusButton = document.createElement("button");
                plusButton.appendChild(document.createTextNode("+"));
                plusButton.addEventListener("click", function () {
                  setList(prependDefault(flare.value1.get()));
                });
                content.appendChild(plusButton);

                // if list is non-empty, add its UI components and minusButton
                if (flare.value0.length > 0) {
                  // relies on fact that tail UI has a single element
                  var tailComponent = flare.value0.pop();
                  var headComponents = flare.value0;
                  headComponents.forEach(function (c) {
                    // display head on same line as +/- buttons
                    c.style.display = "inline";
                    content.appendChild(c);
                  });
                  var minusButton = document.createElement("button");
                  minusButton.appendChild(document.createTextNode("-"));
                  minusButton.addEventListener("click", function () {
                    setList(flare.value1.get().value1);  // remove head of list
                  });
                  content.appendChild(minusButton);
                  content.appendChild(tailComponent);
                }

                // fresh content
                var oldContent = document.getElementById(uid);
                if (oldContent) container.removeChild(oldContent);
                container.appendChild(content);
              }

              setList(defaultList);
              return container;
            };
          };
        };
      };
    };
  };

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["constant"] = $foreign.constant;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Flare"];
  var Color = PS["Color"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];        
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var functorFlare = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Data_Functor.Functor(function (f) {
      return function (v) {
          return UI(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(functorFlare)(f))(v));
      };
  });
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)(function ($128) {
                  return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(handler)($128));
              })(ui);
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var runFlareShow = function (dictShow) {
      return function (controls) {
          return function (target) {
              return function (ui) {
                  return runFlare(controls)(target)(Data_Functor.map(functorUI)(Data_Show.show(dictShow))(ui));
              };
          };
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                           
  var intSlider = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(label)($$default);
              };
          };
      };
  };
  var select = function (dictFoldable) {
      return function (label) {
          return function (v) {
              return function (toString) {
                  return createUI($foreign.cSelect(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
              };
          };
      };
  };                                     
  var textarea = createUI($foreign.cTextarea);
  var textarea_ = textarea("");
  var applyFlare = new Control_Apply.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Control_Apply.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Apply.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Control_Applicative.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Control_Applicative.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Control_Applicative.pure(applicativeFlare)(x)));
  });
  var resizableList = function (label) {
      return function (aUi) {
          return function (defaultA) {
              return function (defaultList) {
                  var prependDefault = Data_List_Types.Cons.create(defaultA);
                  var listUi = function (v) {
                      if (v instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(applicativeUI)(Data_List_Types.Nil.value);
                      };
                      if (v instanceof Data_List_Types.Cons) {
                          return Control_Apply.apply(applyUI)(Data_Functor.map(functorUI)(Data_List_Types.Cons.create)(aUi(v.value0)))(resizableList("")(aUi)(defaultA)(v.value1));
                      };
                      throw new Error("Failed pattern match at Flare line 377, column 14 - line 380, column 59: " + [ v.constructor.name ]);
                  };
                  return createUI($foreign.cResizableList(prependDefault)(listUi))(label)(defaultList);
              };
          };
      };
  };
  exports["flareWith"] = flareWith;
  exports["intSlider"] = intSlider;
  exports["resizableList"] = resizableList;
  exports["runFlare"] = runFlare;
  exports["runFlareShow"] = runFlareShow;
  exports["runFlareWith"] = runFlareWith;
  exports["select"] = select;
  exports["textarea"] = textarea;
  exports["textarea_"] = textarea_;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Validation_Semigroup = PS["Data.Validation.Semigroup"];
  var Flare = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Signal_Channel = PS["Signal.Channel"];        
  var WhoWith = function (x) {
      return x;
  };
  var ValidationError = function (x) {
      return x;
  };
  var Thought = function (x) {
      return x;
  };
  var Location = function (x) {
      return x;
  };
  var Evidence = function (x) {
      return x;
  };
  var Sad = (function () {
      function Sad() {

      };
      Sad.value = new Sad();
      return Sad;
  })();
  var Scared = (function () {
      function Scared() {

      };
      Scared.value = new Scared();
      return Scared;
  })();
  var Angry = (function () {
      function Angry() {

      };
      Angry.value = new Angry();
      return Angry;
  })();
  var Activity = function (x) {
      return x;
  };
  var Situation = function (x) {
      return x;
  };
  var Form = function (x) {
      return x;
  };
  var showWhoWith = Data_Show.showString;
  var showValidationError = Data_Show.showString;
  var showThought = Data_Show.showString;
  var showLocation = Data_Show.showString;
  var showEvidence = Data_Show.showString;
  var showEmotion = new Data_Show.Show(function (v) {
      if (v instanceof Sad) {
          return "Sad";
      };
      if (v instanceof Scared) {
          return "Scared";
      };
      if (v instanceof Angry) {
          return "Angry";
      };
      throw new Error("Failed pattern match at Main line 48, column 1 - line 48, column 37: " + [ v.constructor.name ]);
  });
  var showActivity = Data_Show.showString;
  var showSituation = new Data_Show.Show(function (v) {
      return "Location: " + (Data_Show.show(showLocation)(v.location) + ("\x0a" + ("Activity: " + (Data_Show.show(showActivity)(v.activity) + ("\x0a" + ("With: " + (Data_Show.show(showWhoWith)(v.whowith) + "\x0a")))))));
  });
  var showCbtForm = new Data_Show.Show(function (v) {
      return Data_Show.show(showSituation)(v.situation) + ("Initial thought: " + (Data_Show.show(showThought)(v.negativeThought) + ("\x0a" + ("Initial moods: " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(showEmotion)(Data_Show.showInt)))(v.initialMoods) + ("\x0a" + ("Evidence for the thought: " + (Data_Show.show(Data_Show.showArray(showEvidence))(v.evidenceFor) + ("\x0a" + ("Evidence against the thought: " + (Data_Show.show(Data_Show.showArray(showEvidence))(v.evidenceAgainst) + ("\x0a" + ("New thought: " + (Data_Show.show(showThought)(v.newThought) + ("\x0a" + ("New moods: " + Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(showEmotion)(Data_Show.showInt)))(v.newMoods)))))))))))))))));
  });
  var newtypeWhoWith = new Data_Newtype.Newtype(function (n) {
      return n;
  }, WhoWith);
  var newtypeValidationError = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ValidationError);
  var newtypeThought = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Thought);
  var newtypeLocation = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Location);
  var newtypeEvidence = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Evidence);
  var newtypeActivity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Activity);
  var moodSlider = Flare.intSlider("Level")(0)(100)(50);
  var moodDropDown = (function () {
      var emotions = new Data_NonEmpty.NonEmpty(Sad.value, [ Scared.value, Angry.value ]);
      return Flare.select(Data_Foldable.foldableArray)("Mood")(emotions)(Data_Show.show(showEmotion));
  })();
  var moodWidget = Control_Apply.lift2(Flare.applyUI)(Data_Tuple.Tuple.create)(moodDropDown)(moodSlider);
  var moodList = function (label) {
      return Data_Functor.map(Flare.functorUI)(Data_Array.fromFoldable(Data_List_Types.foldableList))(Flare.resizableList(label)(Data_Function["const"](moodWidget))(new Data_Tuple.Tuple(Sad.value, 50))(Data_List.fromFoldable(Data_Foldable.foldableArray)([  ])));
  };
  var invalid$prime = function (msg) {
      return Data_Validation_Semigroup.invalid([ msg ]);
  };
  var validateArrayNotEmpty = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return invalid$prime(v + " should have at least one member");
          };
          return Control_Applicative.pure(Data_Validation_Semigroup.applicativeV(Data_Semigroup.semigroupArray))(v1);
      };
  };
  var validateStrNotEmpty = function (dictNewtype) {
      return function (label) {
          var validate = function (label1) {
              return function (str) {
                  if (str === "") {
                      return invalid$prime(label1 + " should be a nonempty string");
                  };
                  if (Data_Boolean.otherwise) {
                      return Control_Applicative.pure(Data_Validation_Semigroup.applicativeV(Data_Semigroup.semigroupArray))(str);
                  };
                  throw new Error("Failed pattern match at Main line 104, column 5 - line 106, column 29: " + [ label1.constructor.name, str.constructor.name ]);
              };
          };
          return function ($53) {
              return Data_Functor.map(Data_Validation_Semigroup.functorV)(Data_Newtype.wrap(dictNewtype))(validate(label)(Data_Newtype.unwrap(dictNewtype)($53)));
          };
      };
  };
  var evidenceList = function (label) {
      return Data_Functor.map(Flare.functorUI)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap(newtypeEvidence)))(Data_Array.fromFoldable(Data_List_Types.foldableList)))(Flare.resizableList(label)(Data_Function["const"](Flare.textarea_)(""))("")(Data_List.fromFoldable(Data_Foldable.foldableArray)([  ])));
  };
  var eqEmotion = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sad && y instanceof Sad) {
              return true;
          };
          if (x instanceof Scared && y instanceof Scared) {
              return true;
          };
          if (x instanceof Angry && y instanceof Angry) {
              return true;
          };
          return false;
      };
  });
  var validateMoodsMatch = function (init) {
      return function ($$final) {
          if (Data_Eq.eq(Data_Eq.eqArray(eqEmotion))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(init))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)($$final))) {
              return Control_Applicative.pure(Data_Validation_Semigroup.applicativeV(Data_Semigroup.semigroupArray))($$final);
          };
          if (Data_Boolean.otherwise) {
              return invalid$prime("Lists of moods should match");
          };
          throw new Error("Failed pattern match at Main line 96, column 1 - line 96, column 97: " + [ init.constructor.name, $$final.constructor.name ]);
      };
  };
  var emptyTextArea = function (dictNewtype) {
      return function ($54) {
          return Data_Functor.map(Flare.functorUI)(Data_Newtype.wrap(dictNewtype))(Data_Function.flip(Flare.textarea)("")($54));
      };
  };
  var initialThoughtInput = emptyTextArea(newtypeThought)("What negative thought was going through your mind?");
  var buildSituation = function (location) {
      return function (activity) {
          return function (whowith) {
              return {
                  location: location, 
                  activity: activity, 
                  whowith: whowith
              };
          };
      };
  };
  var situationInput = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(buildSituation)(emptyTextArea(newtypeLocation)("Where are you?")))(emptyTextArea(newtypeActivity)("What are you doing?")))(emptyTextArea(newtypeWhoWith)("Who are you with?"));
  var validateSituation = function (v) {
      return Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Data_Functor.map(Data_Validation_Semigroup.functorV)(buildSituation)(validateStrNotEmpty(newtypeLocation)("Location")(v.location)))(validateStrNotEmpty(newtypeActivity)("Activity")(v.activity)))(Control_Applicative.pure(Data_Validation_Semigroup.applicativeV(Data_Semigroup.semigroupArray))(v.whowith));
  };
  var validateForm = function (sit) {
      return function (negThought) {
          return function (initMoods) {
              return function (evFor) {
                  return function (evAgainst) {
                      return function (newThought) {
                          return function (newMoods) {
                              var buildCbtForm = function (sit1) {
                                  return function (negThought1) {
                                      return function (initMoods1) {
                                          return function (evFor1) {
                                              return function (evAgainst1) {
                                                  return function (newThought1) {
                                                      return function (newMoods1) {
                                                          return Form({
                                                              situation: sit1, 
                                                              negativeThought: negThought1, 
                                                              initialMoods: initMoods1, 
                                                              evidenceFor: evFor1, 
                                                              evidenceAgainst: evAgainst1, 
                                                              newThought: newThought1, 
                                                              newMoods: newMoods1
                                                          });
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                              return Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Control_Apply.apply(Data_Validation_Semigroup.applyV(Data_Semigroup.semigroupArray))(Data_Functor.map(Data_Validation_Semigroup.functorV)(buildCbtForm)(validateSituation(sit)))(validateStrNotEmpty(newtypeThought)("Initial thought")(negThought)))(validateArrayNotEmpty("List of moods")(initMoods)))(validateArrayNotEmpty("Evidence for")(evFor)))(validateArrayNotEmpty("Evidence against")(evAgainst)))(validateStrNotEmpty(newtypeThought)("Final thought")(newThought)))(validateMoodsMatch(initMoods)(newMoods));
                          };
                      };
                  };
              };
          };
      };
  };
  var alternativeThoughtInput = emptyTextArea(newtypeThought)("Write a new thought that takes into account the evidence for and against the original thought.");
  var bigMood = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(validateForm)(situationInput))(initialThoughtInput))(moodList("What are you feeling?")))(evidenceList("What evidence supports the thought?")))(evidenceList("What evidence indicates that this thought might not be true all the time?")))(alternativeThoughtInput))(moodList("How do you feel about the situation now?"));
  var main = Flare.runFlareShow(Data_Validation_Semigroup.showV(Data_Show.showArray(showValidationError))(showCbtForm))("input")("output")(bigMood);
  exports["Activity"] = Activity;
  exports["Form"] = Form;
  exports["Sad"] = Sad;
  exports["Scared"] = Scared;
  exports["Angry"] = Angry;
  exports["Evidence"] = Evidence;
  exports["Location"] = Location;
  exports["Situation"] = Situation;
  exports["Thought"] = Thought;
  exports["ValidationError"] = ValidationError;
  exports["WhoWith"] = WhoWith;
  exports["alternativeThoughtInput"] = alternativeThoughtInput;
  exports["bigMood"] = bigMood;
  exports["buildSituation"] = buildSituation;
  exports["emptyTextArea"] = emptyTextArea;
  exports["evidenceList"] = evidenceList;
  exports["initialThoughtInput"] = initialThoughtInput;
  exports["invalid'"] = invalid$prime;
  exports["main"] = main;
  exports["moodDropDown"] = moodDropDown;
  exports["moodList"] = moodList;
  exports["moodSlider"] = moodSlider;
  exports["moodWidget"] = moodWidget;
  exports["situationInput"] = situationInput;
  exports["validateArrayNotEmpty"] = validateArrayNotEmpty;
  exports["validateForm"] = validateForm;
  exports["validateMoodsMatch"] = validateMoodsMatch;
  exports["validateSituation"] = validateSituation;
  exports["validateStrNotEmpty"] = validateStrNotEmpty;
  exports["newtypeLocation"] = newtypeLocation;
  exports["showLocation"] = showLocation;
  exports["newtypeActivity"] = newtypeActivity;
  exports["showActivity"] = showActivity;
  exports["newtypeWhoWith"] = newtypeWhoWith;
  exports["showWhoWith"] = showWhoWith;
  exports["showSituation"] = showSituation;
  exports["eqEmotion"] = eqEmotion;
  exports["showEmotion"] = showEmotion;
  exports["newtypeThought"] = newtypeThought;
  exports["showThought"] = showThought;
  exports["newtypeEvidence"] = newtypeEvidence;
  exports["showEvidence"] = showEvidence;
  exports["showCbtForm"] = showCbtForm;
  exports["newtypeValidationError"] = newtypeValidationError;
  exports["showValidationError"] = showValidationError;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
